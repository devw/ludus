{"version":3,"sources":["services/handle-questions.js","score/score.module.css","question/question.module.css","multiple-choice/multiple-choice.module.css","score/index.js","question/index.js","multiple-choice/index.js","App.js","serviceWorker.js","index.js"],"names":["setQuestion","question","getQuestion","this","setState","options","getOptions","onReply","response","state","score","Number","eval","Math","min","parseInt","max","operator","rand","result","shift","Array","map","e","i","num","random","module","exports","Score","props","scoreStyle","width","backgroundColor","className","classes","style","Question","id","MultipleChoice","handleClick","stopPropagation","onClick","target","innerHTML","multipleChoice","key","App","componentDidMount","render","bind","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ydAAaA,YAAc,WACvB,IAAMC,EAAWC,cACjBC,KAAKC,SAAS,CACVH,SAAUA,EACVI,QAASC,WAAWL,MAIfM,QAAU,SAAVA,QAAoBC,UAAW,IAAD,YACXL,KAAKM,MAAzBC,MAD+B,YAC/BA,MAAOT,SADwB,YACxBA,SACfU,OAAOH,YAAcI,KAAKX,UACpBE,KAAKC,SAAS,CAAEM,MAAOG,KAAKC,IAAIC,SAASL,OAAS,EAAG,KAAO,MAC5DP,KAAKC,SAAS,CAAEM,MAAOG,KAAKG,IAAID,SAASL,OAAS,EAAG,GAAK,MAChEP,KAAKH,eAGHE,YAAc,WAChB,IAAMe,EAAWC,KAAK,GAAK,EAAI,IAAM,IACrC,MAAM,GAAN,OAAUA,KAAK,KAAf,YAAuBD,EAAvB,YAAmCC,KAAK,MAGtCZ,WAAa,SAAbA,WAAcL,UAChB,IAAMkB,OAASP,KAAKX,UACdmB,MAAQF,KAAK,GAAK,EACxB,OAAO,qKAAI,IAAIG,MAAM,IAAIC,KAAI,SAACC,EAAGC,GAAJ,OAAUL,OAASK,EAAIJ,UAGlDF,KAAO,SAACO,GAAD,OAASV,SAASF,KAAKa,SAAWD,K,mBC1B/CE,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,eAAiB,0C,wLCEtBC,EAAQ,SAACC,GAAW,IACrBpB,EAAUoB,EAAVpB,MACFqB,EAAa,CACfC,MAAOtB,EACPuB,gBAAiBlB,SAASL,GAAS,GAAK,QAAU,OAEtD,OACI,yBAAKwB,UAAWC,IAAQzB,OACpB,yBAAK0B,MAAOL,GAAarB,K,gBCRxB2B,EAAW,SAACP,GAAD,OACpB,yBAAKQ,GAAG,MAAMJ,UAAWC,IAAQlC,UAC7B,yBAAKqC,GAAG,OAAR,IAAgBR,EAAM7B,SAAtB,KACA,6C,gBCHKsC,EAAiB,SAACT,GAAW,IAAD,EAC/BU,EAAc,SAAUjB,GAC1BA,EAAEkB,kBACFX,EAAMY,QAAQnB,EAAEoB,OAAOC,YAG3B,OACI,wBAAIV,UAAWC,IAAQU,gBAAvB,UACKf,EAAMzB,eADX,aACK,EAAeiB,KAAI,SAACC,EAAGC,GAAJ,OAChB,wBAAIsB,IAAKtB,EAAGkB,QAASF,GAChBjB,Q,OCoBNwB,E,kDA1BX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAQVkB,kBAAoB,WAChB,EAAKhD,eAVU,EAanBiD,OAAS,kBACL,yBAAKf,UAAU,OACX,qCACA,kBAAC,EAAD,CAAUjC,SAAU,EAAKQ,MAAMR,WAC/B,kBAAC,EAAD,CACIyC,QAAS,EAAKnC,QACdF,QAAS,EAAKI,MAAMJ,UAExB,kBAAC,EAAD,CAAOK,MAAO,EAAKD,MAAMC,UAnB7B,EAAKD,MAAQ,CACTC,MAAO,MAEX,EAAKV,YAAcA,IAAYkD,KAAZ,gBACnB,EAAK3C,QAAUA,IAAQ2C,KAAR,gBANA,E,UADLC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ff08b4b.chunk.js","sourcesContent":["export const setQuestion = function () {\n    const question = getQuestion();\n    this.setState({\n        question: question,\n        options: getOptions(question),\n    });\n};\n\nexport const onReply = function (response) {\n    const { score, question } = this.state;\n    Number(response) === eval(question)\n        ? this.setState({ score: Math.min(parseInt(score) + 5, 100) + \"%\" })\n        : this.setState({ score: Math.max(parseInt(score) - 5, 0) + \"%\" });\n    this.setQuestion();\n};\n\nconst getQuestion = () => {\n    const operator = rand(2) > 0 ? \"+\" : \"-\";\n    return `${rand(100)} ${operator} ${rand(10)}`;\n};\n\nconst getOptions = (question) => {\n    const result = eval(question);\n    const shift = rand(4) - 3;\n    return [...new Array(4)].map((e, i) => result + i + shift);\n};\n\nconst rand = (num) => parseInt(Math.random() * num);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"score\":\"score_score__h2bhc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"question_question__3d0XS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"multipleChoice\":\"multiple-choice_multipleChoice__3HYRk\"};","import React from \"react\";\nimport classes from \"./score.module.css\";\n\nexport const Score = (props) => {\n    const { score } = props;\n    const scoreStyle = {\n        width: score,\n        backgroundColor: parseInt(score) > 20 ? \"green\" : \"red\",\n    };\n    return (\n        <div className={classes.score}>\n            <div style={scoreStyle}>{score}</div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport classes from \"./question.module.css\";\n\nexport const Question = (props) => (\n    <div id=\"q-a\" className={classes.question}>\n        <div id=\"que\"> {props.question} </div>\n        <div>&nbsp;=&nbsp;?</div>\n    </div>\n);\n","import React from \"react\";\nimport classes from \"./multiple-choice.module.css\";\n\nexport const MultipleChoice = (props) => {\n    const handleClick = function (e) {\n        e.stopPropagation();\n        props.onClick(e.target.innerHTML);\n    };\n\n    return (\n        <ul className={classes.multipleChoice}>\n            {props.options?.map((e, i) => (\n                <li key={i} onClick={handleClick}>\n                    {e}\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import React, { Component } from \"react\";\nimport { Score } from \"./score/\";\nimport { Question } from \"./question/\";\nimport { MultipleChoice } from \"./multiple-choice/\";\nimport { setQuestion, onReply } from \"./services/handle-questions\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: \"0%\",\n        };\n        this.setQuestion = setQuestion.bind(this);\n        this.onReply = onReply.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.setQuestion();\n    };\n\n    render = () => (\n        <div className=\"App\">\n            <h1>Ludus</h1>\n            <Question question={this.state.question}></Question>\n            <MultipleChoice\n                onClick={this.onReply}\n                options={this.state.options}\n            ></MultipleChoice>\n            <Score score={this.state.score}></Score>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}